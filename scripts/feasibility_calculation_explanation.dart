#!/usr/bin/env dart

/// EXPLICATION D√âTAILL√âE DE LA M√âTHODE DE CALCUL DU TAUX DE R√âUSSITE (FAISABILIT√â)
///
/// Le taux de r√©ussite est calcul√© sur une √©chelle de 0.0 √† 1.0 o√π :
/// - 0.0 = Impossible √† r√©ussir
/// - 1.0 = Tr√®s facile √† r√©ussir
/// - 0.5 = √âquilibr√© (difficile mais faisable)

void main() {
  print('üìä M√âTHODE DE CALCUL DU TAUX DE R√âUSSITE D√âTAILL√âE\n');

  print('üéØ √âCHELLE DE FAISABILIT√â :');
  print('  0.0 - 0.2 : Tr√®s difficile (niveau boss extr√™me)');
  print('  0.2 - 0.4 : Difficile (d√©fi significatif)');
  print('  0.4 - 0.6 : √âquilibr√© (difficile mais faisable) ‚Üê OBJECTIF');
  print('  0.6 - 0.8 : Facile (accessible)');
  print('  0.8 - 1.0 : Tr√®s facile (tutoriel)\n');

  print('üî¢ FORMULE DE CALCUL :');
  print('  Faisabilit√© = 1.0 - P√©nalit√©s');
  print('  P√©nalit√©s = P√©nalit√©Score + P√©nalit√©Objectifs\n');

  print('üìà P√âNALIT√âS POUR LE SCORE (points par mouvement) :');
  print('  > 400 points/mouvement : -0.4 (40% de p√©nalit√©)');
  print('  > 300 points/mouvement : -0.3 (30% de p√©nalit√©)');
  print('  > 250 points/mouvement : -0.2 (20% de p√©nalit√©)');
  print('  > 200 points/mouvement : -0.1 (10% de p√©nalit√©)');
  print('  < 200 points/mouvement : 0 (aucune p√©nalit√©)\n');

  print('üéØ P√âNALIT√âS POUR LES OBJECTIFS DE COLLECTE (tuiles par mouvement) :');
  print('  > 3.0 tuiles/mouvement : -0.5 (50% de p√©nalit√©)');
  print('  > 2.5 tuiles/mouvement : -0.4 (40% de p√©nalit√©)');
  print('  > 2.0 tuiles/mouvement : -0.3 (30% de p√©nalit√©)');
  print('  > 1.5 tuiles/mouvement : -0.2 (20% de p√©nalit√©)');
  print('  > 1.0 tuiles/mouvement : -0.1 (10% de p√©nalit√©)');
  print('  < 1.0 tuiles/mouvement : 0 (aucune p√©nalit√©)\n');

  print('üìù EXEMPLES DE CALCUL :\n');

  // Exemple 1 : Niveau facile
  print('üå± EXEMPLE 1 - NIVEAU FACILE :');
  print('  - 20 mouvements, 3000 points');
  print('  - Objectif : collecter 15 flowers');
  print('  - Score/mouvement : 3000 √∑ 20 = 150 points/mouvement');
  print('  - Tuiles/mouvement : 15 √∑ 20 = 0.75 tuiles/mouvement');
  print('  - P√©nalit√© score : 0 (150 < 200)');
  print('  - P√©nalit√© objectif : 0 (0.75 < 1.0)');
  print('  - FAISABILIT√â = 1.0 - 0 - 0 = 1.0 (tr√®s facile)\n');

  // Exemple 2 : Niveau √©quilibr√©
  print('‚öñÔ∏è EXEMPLE 2 - NIVEAU √âQUILIBR√â :');
  print('  - 25 mouvements, 5000 points');
  print('  - Objectif : collecter 35 flowers');
  print('  - Score/mouvement : 5000 √∑ 25 = 200 points/mouvement');
  print('  - Tuiles/mouvement : 35 √∑ 25 = 1.4 tuiles/mouvement');
  print('  - P√©nalit√© score : 0 (200 = 200)');
  print('  - P√©nalit√© objectif : -0.1 (1.4 > 1.0)');
  print('  - FAISABILIT√â = 1.0 - 0 - 0.1 = 0.9 (facile)\n');

  // Exemple 3 : Niveau difficile
  print('üî• EXEMPLE 3 - NIVEAU DIFFICILE :');
  print('  - 20 mouvements, 6000 points');
  print('  - Objectif : collecter 50 flowers');
  print('  - Score/mouvement : 6000 √∑ 20 = 300 points/mouvement');
  print('  - Tuiles/mouvement : 50 √∑ 20 = 2.5 tuiles/mouvement');
  print('  - P√©nalit√© score : -0.3 (300 > 250)');
  print('  - P√©nalit√© objectif : -0.4 (2.5 = 2.5)');
  print('  - FAISABILIT√â = 1.0 - 0.3 - 0.4 = 0.3 (difficile)\n');

  // Exemple 4 : Niveau boss
  print('üëë EXEMPLE 4 - NIVEAU BOSS :');
  print('  - 25 mouvements, 4500 points');
  print('  - Objectifs : 35 flowers + 35 crystals');
  print('  - Score/mouvement : 4500 √∑ 25 = 180 points/mouvement');
  print('  - Tuiles/mouvement : (35 + 35) √∑ 25 = 2.8 tuiles/mouvement');
  print('  - P√©nalit√© score : 0 (180 < 200)');
  print('  - P√©nalit√© objectif : -0.4 (2.8 > 2.5)');
  print(
      '  - FAISABILIT√â = 1.0 - 0 - 0.4 = 0.6 (√©quilibr√© - objectif atteint!)\n');

  print('üéØ OBJECTIFS D√âFINIS :');
  print('  - Niveaux normaux : 0.5 - 0.8 (√©quilibr√© √† facile)');
  print('  - Niveaux boss : 0.6 (difficile mais faisable)');
  print('  - Niveaux tutoriel : 0.8 - 1.0 (tr√®s facile)\n');

  print('üìä INTERPR√âTATION DES R√âSULTATS :');
  print('  - 0.9+ : Le joueur r√©ussit facilement, peut-√™tre trop simple');
  print('  - 0.7-0.9 : Niveau accessible, bonne progression');
  print('  - 0.5-0.7 : Niveau √©quilibr√©, d√©fi appropri√©');
  print('  - 0.3-0.5 : Niveau difficile, d√©fi significatif');
  print('  - 0.0-0.3 : Niveau tr√®s difficile, risque de frustration\n');

  print('üîß AJUSTEMENTS AUTOMATIQUES :');
  print('  Si faisabilit√© < 0.4 : R√©duire score et objectifs');
  print('  Si faisabilit√© > 0.8 : Augmenter l√©g√®rement la difficult√©');
  print('  Si faisabilit√© = 0.6 : Parfait pour un niveau boss!\n');

  print('‚úÖ CONCLUSION :');
  print('  Cette m√©thode garantit une progression √©quilibr√©e o√π chaque');
  print('  niveau repr√©sente un d√©fi appropri√© selon sa position dans');
  print('  la progression du jeu.');
}

/// Fonction de calcul d√©taill√©e avec logs
double calculateDetailedFeasibility({
  required int maxMoves,
  required int targetScore,
  required List<Map<String, dynamic>> objectives,
  bool showDetails = false,
}) {
  if (showDetails) {
    print('üîç CALCUL D√âTAILL√â :');
    print('  Mouvements : $maxMoves');
    print('  Score cible : $targetScore');
    print('  Objectifs : ${objectives.length}');
  }

  double feasibility = 1.0;

  // Calcul p√©nalit√© score
  final scorePerMove = targetScore / maxMoves;
  double scorePenalty = 0;

  if (scorePerMove > 400) {
    scorePenalty = 0.4;
  } else if (scorePerMove > 300) {
    scorePenalty = 0.3;
  } else if (scorePerMove > 250) {
    scorePenalty = 0.2;
  } else if (scorePerMove > 200) {
    scorePenalty = 0.1;
  }

  if (showDetails) {
    print('  Score/mouvement : ${scorePerMove.toStringAsFixed(1)}');
    print('  P√©nalit√© score : $scorePenalty');
  }

  // Calcul p√©nalit√© objectifs
  double objectivePenalty = 0;
  for (final obj in objectives) {
    if (obj['type'] == 'collectTiles') {
      final target = obj['target'] as int;
      final tilesPerMove = target / maxMoves;

      double objPenalty = 0;
      if (tilesPerMove > 3.0) {
        objPenalty = 0.5;
      } else if (tilesPerMove > 2.5) {
        objPenalty = 0.4;
      } else if (tilesPerMove > 2.0) {
        objPenalty = 0.3;
      } else if (tilesPerMove > 1.5) {
        objPenalty = 0.2;
      } else if (tilesPerMove > 1.0) {
        objPenalty = 0.1;
      }

      objectivePenalty =
          objectivePenalty > objPenalty ? objectivePenalty : objPenalty;

      if (showDetails) {
        print(
            '  ${obj['tileType']}/mouvement : ${tilesPerMove.toStringAsFixed(1)}');
        print('  P√©nalit√© ${obj['tileType']} : $objPenalty');
      }
    }
  }

  if (showDetails) {
    print('  P√©nalit√© objectifs max : $objectivePenalty');
  }

  // Calcul final
  feasibility = 1.0 - scorePenalty - objectivePenalty;
  feasibility = feasibility.clamp(0.0, 1.0);

  if (showDetails) {
    print('  FAISABILIT√â FINALE : ${feasibility.toStringAsFixed(2)}');
    print('');
  }

  return feasibility;
}








